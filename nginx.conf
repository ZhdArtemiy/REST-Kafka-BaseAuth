##########################################################
                ####### BLOCK MAP  #######
####################### USER_ROLES #######################                
# Get a list topic_name variables
##
        map $uri $topic_name                            {
        ~^/.*/topics/([^/]+)/?.*$ $1;
                                                        }
# Map users                                                     <<<< Add New users when add http basic auth
## Role: Consumer - Reading message from topics ($t_read), Producer - Writing message in topics ($t_write)
        map "$remote_user:$topic_name" $t_write         {
            "listbaseP:ListBase"    allow;   
            "testingceP:testingce"  allow; 
            default         deny; 
                                                        }
###                                                        
        map "$remote_user:$filter" $t_read              {
            "testingceC:testingce"  allow;
            "listbaseC:ListBase"    allow;  
            default         deny; 
                                                        }                                                    
##########################################################
####################### ROLES_AUTH #######################
# Map auth                                                      <<<< Add New topics when add http basic auth record
## Variables 1 unable auth for Topic                                                        
        map $topic_name $auth_tc                         {
        ListBase        1;
        testingce       1;
        default         0;
                                                        }                                                     
# Map Roles 
## If the topic requires authorization ($auth_t=1) and t_write does not allow, variable $deny will be equal to 1.
        map "$auth_tc:$t_write" $auth_write             {
                "1:allow"         0;
                "1:deny"          1;
                default           0;
                                                        }
###                                                        
        map "$auth_t:$t_read" $auth_read                {
                "1:allow"         1;
                "1:deny"          0;
                default           1;
                                                        }                                                        
# Map Allow or Disable auth for Topic Kafka
## 1 allowed 2 disable                                   
    map $auth_tc $auth_basic                             {
            1 "Restricted area";
            default off;
                                                        }
    map $auth_tc $auth_basic_user_file                   {
        1 "/etc/nginx/auth.basic";
        default "";
                                                        }
###                                                                             
    map $auth_t $auth_basic                             {
            1 "Restricted area";
            default off;
                                                        }
    map $auth_t $auth_basic_user_file                   {
        1 "/etc/nginx/auth.basic";
        default "";
                                                        }                                                                                                         
##########################################################
                ####### BLOCK SERVER #######
server  
        {    
        listen 80;
        listen [::]:80;
        server_name localhost;
            if ($request_method = DELETE)
                                        {
                                        return 405;
                                        }
# Access connect Rest-proxy 
##
    location /                                                  {
            proxy_pass http://rest-proxy:8082;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-for $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header HTTPS on;
            auth_basic "off";
                                                                }
##########################################################
###################### TOPICS RECORD #####################
# Grant user record topic
## See # Map topics 
    location  ~* ^/.*/topics/.*                                 {                     
                if ($auth_write = 1)          {
                                        return 403;
                                        }                                                                     
            proxy_pass http://rest-proxy:8082;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-for $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header HTTPS on;
            auth_basic $auth_basic;
            auth_basic_user_file $auth_basic_user_file;                                         
                                                                }
##########################################################
##################### TOPICS CONSUMER ####################
## Access for subscription in topics consumer groups
## The rule applies only to locations where a subscription for reading from a topic is requested.
## Logic:
## The request body from the user is validated.
## For topics that require authentication, the following checks are performed:
## - Which user (from Basic Auth) is making the request.
## - Which topic is specified in the request_body.
## An additional condition is enforced: subscription requests must contain only one topic, not a list.
## Example request body: {"topics":["Test"]}
## The subscription request will be allowed only if the user has been granted access to the specified topic.                                                                
    location ~* ^/consumers/.*/subscription$                    {
        set $filter "";
        set $auth_t "";
        proxy_request_buffering on;
        access_by_lua_block {
            ngx.req.read_body()
            local body = ngx.req.get_body_data()
            local cjson = require "cjson"
            local data = cjson.decode(body)
                if not data['topics'] then 
                    ngx.status = 400
                    ngx.say("Bad Request. Body topics are empty.")
                    ngx.exit(400)
                end
                if  #data['topics'] > 1 then 
                    ngx.status = 400
                    ngx.say("Bad Request. Please input 1 topics.")
                    ngx.exit(400) 
                end
                local filter = data['topics'][1]
                ngx.var.filter = filter
                local t_read = ngx.var.t_read
                local auth_t = 0 -- auth default all topics off 
                local allowed_topics = {    --ADD NEW TOPICS
                    ListBase = true,
                    chernyh_1 = true
                }
                if allowed_topics[filter] then 
                    auth_t = 1 -- unable auth for allowed_topics
                end                
                ngx.var.auth_t = auth_t 
                local auth_read = ngx.var.auth_read            
                if (auth_read == "0") then 
                    ngx.status = 403
                    ngx.say("Access Denied. Request Topics: " .. filter)
                    ngx.exit(403)
                end                       
                        }
            auth_basic $auth_basic;
            auth_basic_user_file $auth_basic_user_file; 
            proxy_pass http://rest-proxy:8082;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-for $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header HTTPS on;
                                                                }
        }
